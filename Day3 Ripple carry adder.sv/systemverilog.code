module full_adder (
    input  logic a, b, cin,
    output logic sum, cout
);
    assign sum  = a ^ b ^ cin;
    assign cout = (a & b) | (b & cin) | (a & cin);
endmodule

module ripple_carry_adder_4bit (
    input  logic [3:0] A, B,
    input  logic       Cin,
    output logic [3:0] Sum,
    output logic       Cout
);
    logic c1, c2, c3;

    // Instantiate full adders
    full_adder FA0 (.a(A[0]), .b(B[0]), .cin(Cin),  .sum(Sum[0]), .cout(c1));
    full_adder FA1 (.a(A[1]), .b(B[1]), .cin(c1),   .sum(Sum[1]), .cout(c2));
    full_adder FA2 (.a(A[2]), .b(B[2]), .cin(c2),   .sum(Sum[2]), .cout(c3));
    full_adder FA3 (.a(A[3]), .b(B[3]), .cin(c3),   .sum(Sum[3]), .cout(Cout));
endmodule

// Code your testbench here
// or browse Examples
module tb_ripple_carry_adder_4bit;
    logic [3:0] A, B;
    logic Cin;
    logic [3:0] Sum;
    logic Cout;

    ripple_carry_adder_4bit uut (
        .A(A), .B(B), .Cin(Cin), .Sum(Sum), .Cout(Cout)
    );

    initial begin
      $dumpfile("dump.vcd");$dumpvars;
        $display("A     B     Cin | Sum   Cout");
        A = 4'b1010; B = 4'b0101; Cin = 0; #10;
        $display("%b + %b + %b = %b (Cout = %b)", A, B, Cin, Sum, Cout);

        A = 4'b1111; B = 4'b0001; Cin = 0; #10;
        $display("%b + %b + %b = %b (Cout = %b)", A, B, Cin, Sum, Cout);

        A = 4'b1001; B = 4'b1001; Cin = 1; #10;
        $display("%b + %b + %b = %b (Cout = %b)", A, B, Cin, Sum, Cout);

      $finish();
    end
endmodule
